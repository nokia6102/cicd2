name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

jobs:
  build_with_signing:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Verify environment variables
        run: |
          echo "Length of BUILD_CERTIFICATE_BASE64: ${#BUILD_CERTIFICATE_BASE64}"
          echo "Length of BUILD_PROVISION_PROFILE_BASE64: ${#BUILD_PROVISION_PROFILE_BASE64}"
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          set -e  # Exit immediately if a command exits with a non-zero status.
          
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # Log lengths of base64 strings
          echo "Length of BUILD_CERTIFICATE_BASE64: ${#BUILD_CERTIFICATE_BASE64}"
          echo "Length of BUILD_PROVISION_PROFILE_BASE64: ${#BUILD_PROVISION_PROFILE_BASE64}"

          # Import certificate and provisioning profile from secrets
          echo "Decoding and saving the certificate and provisioning profile..."
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode > $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode > $PP_PATH

          # Verify if files are created
          echo "Checking if certificate and provisioning profile files are created..."
          ls -l $CERTIFICATE_PATH
          ls -l $PP_PATH

          # Create temporary keychain
          echo "Creating temporary keychain..."
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # Import certificate to keychain
          echo "Importing certificate to keychain..."
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          if [ $? -ne 0 ]; then
            echo "Failed to import certificate to keychain."
            exit 1
          fi

          # Add key partition list to avoid permission issues
          echo "Setting key partition list..."
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          if [ $? -ne 0 ]; then
            echo "Failed to set key partition list."
            exit 1
          fi

          # List keychains to verify
          echo "Listing keychains..."
          security list-keychain -d user -s $KEYCHAIN_PATH
          if [ $? -ne 0 ]; then
            echo "Failed to list keychains."
            exit 1
          fi

          # Apply provisioning profile
          echo "Applying provisioning profile..."
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          if [ $? -ne 0 ]; then
            echo "Failed to apply provisioning profile."
            exit 1
          fi

      - name: Build app
        run: |
          # Your build commands here
          xcodebuild -workspace YourApp.xcworkspace -scheme YourAppScheme -sdk iphoneos -configuration AppStoreDistribution archive -archivePath $GITHUB_WORKSPACE/build/YourApp.xcarchive
          xcodebuild -exportArchive -archivePath $GITHUB_WORKSPACE/build/YourApp.xcarchive -exportOptionsPlist $GITHUB_WORKSPACE/exportOptions.plist -exportPath $GITHUB_WORKSPACE/build

      - name: Cleanup keychain
        run: |
          security delete-keychain $KEYCHAIN_PATH
